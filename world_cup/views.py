from django.views.generic import ListView, TemplateView
from .models import Rider, QualifyingRaceResult, MainRaceResult


class ListRidersView(ListView):
    """
    Displays a list of riders, grouped by their details.

    This view uses the Rider model and renders the list using the 
    'world_cup/list_riders.html' template. It also renames the context variable
    to 'riders' for template usage.
    """
    model = Rider
    template_name = 'world_cup/list_riders.html'
    context_object_name = 'riders'

    def get_queryset(self):
        """
        Overrides the default queryset to optimize database access.

        Uses select_related() on the 'team' relationship to fetch related
        Team data in a single query, reducing database hits.
        
        Returns:
            QuerySet: An optimized queryset of Rider objects.
        """
        return super().get_queryset().select_related('team')


class QualifyingResultsView(TemplateView):
    """
    Displays the qualifying race results.

    This view renders the qualifying results page using the 
    'world_cup/qualifying_results.html' template and orders the results
    by qualifying time (fastest first).
    """
    template_name = 'world_cup/qualifying_results.html'

    def get_context_data(self, **kwargs):
        """
        Provides the qualifying results context to the template.

        Retrieves QualifyingRaceResult objects, optimizes related rider data,
        and orders them by qualifying_time.
        
        Returns:
            dict: Context data including 'qualifying_results'.
        """
        context = super().get_context_data(**kwargs)
        context['qualifying_results'] = (
            QualifyingRaceResult.objects
            .select_related('rider')
            .order_by('qualifying_time')
        )
        return context


class RaceStartOrderView(TemplateView):
    """
    Displays the race start order for the main race.

    The start order is generated by reversing the list of qualifying results,
    so that the slowest qualifier starts first and the fastest qualifier starts last.
    """
    template_name = 'world_cup/race_start_order.html'

    def get_context_data(self, **kwargs):
        """
        Provides the race start order context to the template.

        Retrieves the qualifying results, orders them by qualifying time,
        reverses the list, and passes it to the template.
        
        Returns:
            dict: Context data including 'start_order'.
        """
        context = super().get_context_data(**kwargs)
        qs = list(
            QualifyingRaceResult.objects
            .select_related('rider')
            .order_by('qualifying_time')
        )
        context['start_order'] = list(reversed(qs))  # Slowest qualifier starts first.
        return context


class PodiumView(TemplateView):
    """
    Displays the podium finishes for the main race.

    This view aggregates main race results by the rider's age category and 
    limits the results to the top three finishers per category.
    """
    template_name = 'world_cup/podium.html'

    def get_context_data(self, **kwargs):
        """
        Provides the podium context to the template.

        Retrieves MainRaceResult objects, optimizes related rider and team data,
        groups them by the rider's age category, and selects the top three finishers 
        for each category.
        
        Returns:
            dict: Context data including 'podiums', where each key is an age category
                  and the value is a list of the top three MainRaceResult objects.
        """
        context = super().get_context_data(**kwargs)
        podiums = {}
        results = (
            MainRaceResult.objects
            .select_related('rider', 'rider__team')
            .order_by('finish_time')
        )
        for result in results:
            category = result.rider.age_category
            podiums.setdefault(category, []).append(result)
        # Limit each category to the top three finishers
        context['podiums'] = {cat: res[:3] for cat, res in podiums.items()}
        return context
